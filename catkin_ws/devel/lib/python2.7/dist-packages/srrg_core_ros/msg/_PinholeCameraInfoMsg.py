# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from srrg_core_ros/PinholeCameraInfoMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class PinholeCameraInfoMsg(genpy.Message):
  _md5sum = "5ea9b63340a8b9a4c75f6d5e80c8df0c"
  _type = "srrg_core_ros/PinholeCameraInfoMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 id
geometry_msgs/Pose offset
string topic
string frame_id
float32 depth_scale
float32[9] camera_matrix
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['id','offset','topic','frame_id','depth_scale','camera_matrix']
  _slot_types = ['int32','geometry_msgs/Pose','string','string','float32','float32[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,offset,topic,frame_id,depth_scale,camera_matrix

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PinholeCameraInfoMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.offset is None:
        self.offset = geometry_msgs.msg.Pose()
      if self.topic is None:
        self.topic = ''
      if self.frame_id is None:
        self.frame_id = ''
      if self.depth_scale is None:
        self.depth_scale = 0.
      if self.camera_matrix is None:
        self.camera_matrix = [0.] * 9
    else:
      self.id = 0
      self.offset = geometry_msgs.msg.Pose()
      self.topic = ''
      self.frame_id = ''
      self.depth_scale = 0.
      self.camera_matrix = [0.] * 9

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i7d().pack(_x.id, _x.offset.position.x, _x.offset.position.y, _x.offset.position.z, _x.offset.orientation.x, _x.offset.orientation.y, _x.offset.orientation.z, _x.offset.orientation.w))
      _x = self.topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.depth_scale))
      buff.write(_get_struct_9f().pack(*self.camera_matrix))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.offset is None:
        self.offset = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.id, _x.offset.position.x, _x.offset.position.y, _x.offset.position.z, _x.offset.orientation.x, _x.offset.orientation.y, _x.offset.orientation.z, _x.offset.orientation.w,) = _get_struct_i7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic = str[start:end].decode('utf-8')
      else:
        self.topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame_id = str[start:end]
      start = end
      end += 4
      (self.depth_scale,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 36
      self.camera_matrix = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i7d().pack(_x.id, _x.offset.position.x, _x.offset.position.y, _x.offset.position.z, _x.offset.orientation.x, _x.offset.orientation.y, _x.offset.orientation.z, _x.offset.orientation.w))
      _x = self.topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.depth_scale))
      buff.write(self.camera_matrix.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.offset is None:
        self.offset = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.id, _x.offset.position.x, _x.offset.position.y, _x.offset.position.z, _x.offset.orientation.x, _x.offset.orientation.y, _x.offset.orientation.z, _x.offset.orientation.w,) = _get_struct_i7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topic = str[start:end].decode('utf-8')
      else:
        self.topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame_id = str[start:end]
      start = end
      end += 4
      (self.depth_scale,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 36
      self.camera_matrix = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
_struct_i7d = None
def _get_struct_i7d():
    global _struct_i7d
    if _struct_i7d is None:
        _struct_i7d = struct.Struct("<i7d")
    return _struct_i7d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
