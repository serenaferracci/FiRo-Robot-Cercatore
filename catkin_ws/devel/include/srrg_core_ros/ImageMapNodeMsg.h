// Generated by gencpp from file srrg_core_ros/ImageMapNodeMsg.msg
// DO NOT EDIT!


#ifndef SRRG_CORE_ROS_MESSAGE_IMAGEMAPNODEMSG_H
#define SRRG_CORE_ROS_MESSAGE_IMAGEMAPNODEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace srrg_core_ros
{
template <class ContainerAllocator>
struct ImageMapNodeMsg_
{
  typedef ImageMapNodeMsg_<ContainerAllocator> Type;

  ImageMapNodeMsg_()
    : id(0)
    , timestamp(0.0)
    , transform()
    , parents()
    , topic()
    , seq(0)
    , camera_info(0)  {
    }
  ImageMapNodeMsg_(const ContainerAllocator& _alloc)
    : id(0)
    , timestamp(0.0)
    , transform(_alloc)
    , parents(_alloc)
    , topic(_alloc)
    , seq(0)
    , camera_info(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _parents_type;
  _parents_type parents;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_type;
  _topic_type topic;

   typedef int32_t _seq_type;
  _seq_type seq;

   typedef int32_t _camera_info_type;
  _camera_info_type camera_info;




  typedef boost::shared_ptr< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ImageMapNodeMsg_

typedef ::srrg_core_ros::ImageMapNodeMsg_<std::allocator<void> > ImageMapNodeMsg;

typedef boost::shared_ptr< ::srrg_core_ros::ImageMapNodeMsg > ImageMapNodeMsgPtr;
typedef boost::shared_ptr< ::srrg_core_ros::ImageMapNodeMsg const> ImageMapNodeMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace srrg_core_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'srrg_core_ros': ['/home/serena/catkin_ws/src/srrg_core_ros/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e985cff8cfffd7e6dc32c72765456daa";
  }

  static const char* value(const ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe985cff8cfffd7e6ULL;
  static const uint64_t static_value2 = 0xdc32c72765456daaULL;
};

template<class ContainerAllocator>
struct DataType< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srrg_core_ros/ImageMapNodeMsg";
  }

  static const char* value(const ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n\
float64 timestamp\n\
geometry_msgs/Pose transform\n\
int32[] parents\n\
string topic\n\
int32 seq\n\
int32 camera_info\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.timestamp);
      stream.next(m.transform);
      stream.next(m.parents);
      stream.next(m.topic);
      stream.next(m.seq);
      stream.next(m.camera_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageMapNodeMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srrg_core_ros::ImageMapNodeMsg_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "parents[]" << std::endl;
    for (size_t i = 0; i < v.parents.size(); ++i)
    {
      s << indent << "  parents[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.parents[i]);
    }
    s << indent << "topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic);
    s << indent << "seq: ";
    Printer<int32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "camera_info: ";
    Printer<int32_t>::stream(s, indent + "  ", v.camera_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRRG_CORE_ROS_MESSAGE_IMAGEMAPNODEMSG_H
