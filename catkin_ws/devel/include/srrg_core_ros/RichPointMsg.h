// Generated by gencpp from file srrg_core_ros/RichPointMsg.msg
// DO NOT EDIT!


#ifndef SRRG_CORE_ROS_MESSAGE_RICHPOINTMSG_H
#define SRRG_CORE_ROS_MESSAGE_RICHPOINTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>

namespace srrg_core_ros
{
template <class ContainerAllocator>
struct RichPointMsg_
{
  typedef RichPointMsg_<ContainerAllocator> Type;

  RichPointMsg_()
    : point()
    , normal()
    , rgb()
    , accumulator(0.0)  {
    }
  RichPointMsg_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , normal(_alloc)
    , rgb(_alloc)
    , accumulator(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _normal_type;
  _normal_type normal;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _rgb_type;
  _rgb_type rgb;

   typedef float _accumulator_type;
  _accumulator_type accumulator;




  typedef boost::shared_ptr< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> const> ConstPtr;

}; // struct RichPointMsg_

typedef ::srrg_core_ros::RichPointMsg_<std::allocator<void> > RichPointMsg;

typedef boost::shared_ptr< ::srrg_core_ros::RichPointMsg > RichPointMsgPtr;
typedef boost::shared_ptr< ::srrg_core_ros::RichPointMsg const> RichPointMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srrg_core_ros::RichPointMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace srrg_core_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'srrg_core_ros': ['/home/serena/catkin_ws/src/srrg_core_ros/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb348908cec5c5b4e77306999cb55d27";
  }

  static const char* value(const ::srrg_core_ros::RichPointMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb348908cec5c5b4ULL;
  static const uint64_t static_value2 = 0xe77306999cb55d27ULL;
};

template<class ContainerAllocator>
struct DataType< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srrg_core_ros/RichPointMsg";
  }

  static const char* value(const ::srrg_core_ros::RichPointMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# rich point message, a point  with normal and confidence\n\
geometry_msgs/Point32 point\n\
geometry_msgs/Point32 normal\n\
geometry_msgs/Point32 rgb\n\
float32 accumulator\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::srrg_core_ros::RichPointMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.normal);
      stream.next(m.rgb);
      stream.next(m.accumulator);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RichPointMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srrg_core_ros::RichPointMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srrg_core_ros::RichPointMsg_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "normal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.normal);
    s << indent << "rgb: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.rgb);
    s << indent << "accumulator: ";
    Printer<float>::stream(s, indent + "  ", v.accumulator);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRRG_CORE_ROS_MESSAGE_RICHPOINTMSG_H
